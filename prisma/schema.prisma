// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model PlayersOnlineHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())

  @@map("playersOnlineHistory")
}

model PlayerSession {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId String    @db.ObjectId
  character   Character @relation(fields: [characterId], references: [id])
  startedAt   DateTime
  endedAt     DateTime  @default(now())

  @@map("playersSessions")
}

model Death {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  level      Int
  cause      Int
  creature   Int?
  field      Int?
  victimId   String    @db.ObjectId
  victim     Character @relation(fields: [victimId], references: [id])
  killersIds String[]  @db.ObjectId

  @@map("deaths")
}

model Kill {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  victimId    String    @db.ObjectId
  victimLevel Int
  killerId    String    @db.ObjectId
  killer      Character @relation(fields: [killerId], references: [id])

  @@map("kills")
}

model Character {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String             @unique
  displayName      String             @unique
  sex              Int
  vocation         Int
  level            Int
  residence        Int
  pk               Boolean?
  premium          Boolean
  online           Boolean
  onlineUpdatedAt  DateTime
  banishedUntil    DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sessions         PlayerSession[]
  playerSessionDay PlayerSessionDay[]
  deaths           Death[]
  kills            Kill[]
  userId           String?            @db.ObjectId
  user             User?              @relation(fields: [userId], references: [id])

  @@map("characters")
}

model PlayersOnlineRecord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  world     String   @default("Tibiantis")
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("playersOnlineRecord")
}

model PlayerSessionDay {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  characterId String    @db.ObjectId
  character   Character @relation(fields: [characterId], references: [id])
  expGained   Int
  duration    Int //Time in minutes
  endLevel    Int
  startLevel  Int
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@map("playersSessionsDay")
}
